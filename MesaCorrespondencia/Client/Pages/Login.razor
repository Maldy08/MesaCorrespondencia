@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Login</PageTitle>
<MudItem lg="12" Class="d-flex align-center justify-center mud-width-full py-8">
    <MudImage Src="images/logoLoginBC.png" Height="164" Width="378" />
</MudItem>

<EditForm Model="user" OnValidSubmit="@HandleLogin">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem lg="4" xs="8" md="6">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Usuario" @bind-Value="user.Usuario"
                        For="@(() => user.Usuario)"/>
                    <MudTextField InputType="InputType.Password" Label="Password" @bind-Value="user.Password"
                        For="@(() => user.Password)"/>
                </MudCardContent>
                <MudCardActions >
                    <MudButton Disabled="@_processing" FullWidth ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled"
                               Style="background-color: #6a1b31; color:white;">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="MudBlazor.Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Iniciando sesion</MudText>
                        }
                        else
                        {
                            <MudText>Ingresar</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private UserLogin user = new();
    private string errorMessage = string.Empty;
    private bool _processing = false;

    private async Task HandleLogin()
    {
       // await Task.Delay(10000);
        _processing = true;
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await AuthService.GetUserInfoDB();
            _processing = false;
            NavigationManager.NavigateTo("/ejercicio");
        }
        else
        {
            _processing = false;
            errorMessage = result.Message;
        }
    }

}
