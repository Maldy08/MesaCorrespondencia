@inject IOficioService OficioService
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
<style>

.botones {
    width: 120px;
}
.mud-table td{
   font-size: 10px;
}

    ..mud-icon-size-small{
        font-size: 1.25rem;
    }
    .mud-table-cell {
        font-size: .7rem;
    }

    .root {
    mud-typography-h6-size: 1.225rem;
    }
.mud-table-head #tabla-oficios  {
    background-color : aqua;
}
.color{
     color: #6A1B32;
}

</style>





<MudButton Size="Size.Small" OnClick="ingresar" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">@tituloBoton</MudButton>
<br />
<MudTable Style="padding-top : 2px; padding-bottom : 2px" id="tabla-oficios" T="VwOficiosLista "
    Loading="@_loading"  
    Items="@vwOficiosListas" 
    Hover="true"
    Dense="true"
    Striped="true"
    @ref="mudTable"
    Filter="new Func<VwOficiosLista, bool>(FilterFunc1)"
    OnRowClick="@RowClickEvent">

    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText> &nbsp; <MudIcon Icon="@Icons.Filled.Download" />
        <MudSpacer />
        <MudTextField  Style="font-size : .6rem; block-size : 2.5rem " Immediate="true" Variant="Variant.Outlined"  @bind-Value="searchString1" Placeholder="Busqueda" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
            <MudTh>ACCIONES</MudTh>
            <MudTh>NO.FOLIO</MudTh>
            <MudTh>FECHA</MudTh>
            <MudTh>DEPENDENCIA</MudTh>
            <MudTh>NO.DE OFICIO</MudTh>
            <MudTh>REMITENTE</MudTh>
            <MudTh>DESTINATARIO</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd Class="botones" DataLabel="ACCIONES">
             <MudIconButton Class="color" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Edge="Edge.Start" aria-label="edit" OnClick="() => Edit(context)" ></MudIconButton>
             <MudIconButton Class="color" Icon="@Icons.Material.Outlined.Cancel" Size="Size.Small" Edge="Edge.Start" aria-label="bitacora" OnClick="() => cancelar(context)"></MudIconButton>
        </MudTd>
        <MudTd  DataLabel="NO.FOLIO">@context.Folio</MudTd>
        <MudTd DataLabel="FECHA">@context.Fecha.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="DEPENDENCIA">@context.RemDepen</MudTd>
        <MudTd DataLabel="NO.DE OFICIO">@context.NoOficio</MudTd>
        <MudTd DataLabel="REMITENTE">@context.RemNombre</MudTd>
        <MudTd DataLabel="DESTINATARIO">@context.DestNombre</MudTd>
           
        <MudTd><MudButton style="height: 25px; width : 9;padding 15px 11px;" Color="Color.Primary" Variant="Variant.Filled">DESCARGAR</MudButton></MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{5,10,15}" />
    </PagerContent>
</MudTable>


@code {
    [Parameter]
    public int eor { get; set; }
    [Parameter]
    public int ejercicio { get; set; }
    [Parameter]
    public int empleado { get; set; }
    [Parameter]
    public int depto { get; set; }
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<VwOficiosLista> selectedEventCallback { get; set; }

    private List<VwOficiosLista> vwOficiosListas = new();
    private string searchString1 = "";
    private VwOficiosLista selectedOficio;
    private MudTable<VwOficiosLista> mudTable = new();
    private List<string> clickedEvents = new();
    private int selectedRowNumber = -1;
    private bool _loading = false;
    private string tituloBoton =  "CREAR OFICIO";
    private int rows = 5;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadData();
        _loading = false;
      
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            mudTable.SetRowsPerPage(rows);
    }
    private async Task LoadData()
    {
        if (await AuthService.IsUserInRoleMc())
            vwOficiosListas = await OficioService.OficiosLista(eor);
        else
            vwOficiosListas = await OficioService.OficiosLista(eor, ejercicio, empleado, depto);
    }

    private bool FilterFunc1(VwOficiosLista element) => FilterFunc(element, searchString1);

    private bool FilterFunc(VwOficiosLista element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.RemNombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DestNombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Folio} {element.Fecha} {element.RemDepen} {element.Tipo} {element.NoOficio} {element.RemNombre} {element.DestNombre} {element.Estatus}".Contains(searchString))
            return true;
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<VwOficiosLista> tableRowClickEventArgs)
    {
        OficioSelected(tableRowClickEventArgs.Item);
    }

    private async void OficioSelected(VwOficiosLista element)
    {
        await InvokeAsync(() => selectedEventCallback.InvokeAsync(element));
    }


    private async Task Edit(VwOficiosLista element)
    {
        var parameters = new DialogParameters { ["oficioEdit"] = element, ["isNew"] = false };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium }; // ajustar tamaño en heigh
        var dialog = DialogService.Show<ModalOficioRecibido>("Ingresar Oficio Recibido", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            StateHasChanged();
        }
    }

    private void cancelar(VwOficiosLista registro)
    {
       
    }
    public async void ingresar()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };
        // var parameters = new DialogParameters { ["oficioEdit"] = vwOficiosLista };
        var parameters = new DialogParameters { ["isNew"] = true };
        var dialog = DialogService.Show<ModalOficioRecibido>("Ingresar Oficio Recibido Nuevo", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            var oficio = result.Data as Oficio;
            if (oficio != null)
            {
                await LoadData();
                StateHasChanged();
                Snackbar.Add($"Oficio {oficio.Folio} agregado exitosamente!", Severity.Success);
            }
            else
            {

            }
        }

    }

}
