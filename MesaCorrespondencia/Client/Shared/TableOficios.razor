@inject IOficioService OficioService
@inject ILocalStorageService LocalStorage
@inject IAuthService AuthService
@inject IDialogService DialogService
<style>
    .selected {
    background-color: #E1E1E0 !important;
}

.botones {
    width: 120px;
}
.mud-table td{
   font-size: 12px;
}

.mud-table-head > .mud-table-row > .mud-table-cell {
    
}

.color{
     color: #6A1B32;
}
</style>

<MudTable T="VwOficiosLista"
    Loading="@_loading"  
    Items="@vwOficiosListas.Take(10)" 
    Hover="true" 
    Striped="true"
    @ref="mudTable"
    Filter="new Func<VwOficiosLista, bool>(FilterFunc1)"
    OnRowClick="@RowClickEvent"
      >
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText> &nbsp; <MudIcon Icon="@Icons.Filled.Download"/>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Busqueda" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
            <MudTh>ACCIONES</MudTh>
            <MudTh>NO.FOLIO</MudTh>
            <MudTh>FECHA</MudTh>
            <MudTh>DEPENDENCIA</MudTh>
            <MudTh>TIPO</MudTh>
            <MudTh>NO.DE OFICIO</MudTh>
            <MudTh>REMITENTE</MudTh>
            <MudTh>DESTINATARIO</MudTh>
            <MudTh>ESTATUS</MudTh>
    </HeaderContent>
    
    <RowTemplate>
        <MudTd Class="botones" DataLabel="ACCIONES">
             <MudIconButton Class="color" Icon="@Icons.Material.Filled.RemoveRedEye" Edge="Edge.Start" Size="Size.Small" aria-label="open" OnClick="@ViewClick"></MudIconButton>
             <MudIconButton Class="color" Icon="@Icons.Material.Outlined.Edit" Size="Size.Small" Edge="Edge.Start" aria-label="edit" OnClick="() => Edit(context)" ></MudIconButton>
             <MudIconButton Class="color" Icon="@Icons.Material.Outlined.EditNote" Size="Size.Small" Edge="Edge.Start" aria-label="bitacora" OnClick="@ViewClick"></MudIconButton>
        </MudTd>
        <MudTd DataLabel="NO.FOLIO">@context.Folio</MudTd>
        <MudTd DataLabel="FECHA">@context.Fecha</MudTd>
        <MudTd DataLabel="DEPENDENCIA">@context.RemDepen</MudTd>
        <MudTd DataLabel="TIPO">@context.Tipo</MudTd>
        <MudTd DataLabel="NO.DE OFICIO">@context.NoOficio</MudTd>
        <MudTd DataLabel="REMITENTE">@context.RemNombre</MudTd>
        <MudTd DataLabel="DESTINATARIO">@context.DestNombre</MudTd>
        <MudTd DataLabel="ESTATUS" >
           <TableOficiosEstatus Eor="@context.Eor" Estatus="@context.Estatus"/>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{25,50,100}" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public int eor { get; set; }
    [Parameter]
    public int ejercicio { get; set; }
    [Parameter]
    public int empleado { get; set; }
    [Parameter]
    public int depto { get; set; }
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<VwOficiosLista> selectedEventCallback{ get; set; }

    private List<VwOficiosLista> vwOficiosListas = new();
    private string searchString1 = "";
    private VwOficiosLista selectedOficio = new();
    private MudTable<VwOficiosLista> mudTable;
    private List<string> clickedEvents = new();
    private int selectedRowNumber = -1;
    private bool _loading = false;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        await LoadData();
        _loading = false;
    }
    private async Task LoadData()
    {
        if(await AuthService.IsUserInRoleMc())
            vwOficiosListas = await OficioService.OficiosLista(eor);
        else
            vwOficiosListas = await OficioService.OficiosLista(eor,ejercicio,empleado,depto);
    }

    private bool FilterFunc1(VwOficiosLista element) => FilterFunc(element, searchString1);

    private bool FilterFunc(VwOficiosLista element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.RemNombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DestNombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Folio} {element.Fecha} {element.RemDepen} {element.Tipo} {element.NoOficio} {element.RemNombre} {element.DestNombre} {element.Estatus}".Contains(searchString))
            return true;
        return false;
    }

    private void RowClickEvent(TableRowClickEventArgs<VwOficiosLista> tableRowClickEventArgs)
    {
        OficioSelected(tableRowClickEventArgs.Item);
    }

        private async void OficioSelected(VwOficiosLista element)
    {
        await InvokeAsync(() => selectedEventCallback.InvokeAsync(element));
    }

    private void ViewClick()
    {
        Console.WriteLine("has dado click");
    }

    private void Edit(VwOficiosLista element)
    {
        var parameters = new DialogParameters { ["oficioEdit"] = element };
        var options =  new DialogOptions() {CloseButton = true,MaxWidth = MaxWidth.Large, FullWidth = true};
        DialogService.Show<ModalOficioRecibido>("", parameters,options);
        Console.WriteLine(element);
    }
    //private string SelectedRowClassFunc(VwOficiosLista element, int rowNumber)
    //{
    //    if(selectedRowNumber == rowNumber)
    //    {
    //        selectedRowNumber = -1;
    //        return string.Empty;
    //    }
    //    else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
    //    {
    //        selectedRowNumber = rowNumber;
    //        return "selected";
    //    }
    //    else
    //    {
    //        return string.Empty;
    //    }
    //}

}
