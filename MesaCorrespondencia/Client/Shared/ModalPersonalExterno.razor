@inject IOficioService OficioService
@inject IAuthService AuthService
<style>
    .botones-accion{
         background-color:#6A1B32;
         color:white;
}

    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>


<MudDialog>
    <DialogContent>
        <MudTable T="OficiosUsuext"  
            Items="@Elements" 
            Hover="true" 
            Dense="true"
            Striped="true"
            Breakpoint="Breakpoint.Sm" 
            Filter="new Func<OficiosUsuext,bool>(FilterFunc1)"
            @ref="mudTable" 
            @ondblclick="@Submit"
            @bind-SelectedItem="selectedItem"
            LoadingProgressColor="Color.Info">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Personal Externo</MudText>
                <MudSpacer />
                <MudTextField Immediate="true" @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>NOMBRE DE LA PERSONA</MudTh>
                <MudTh>EMPRESA / DEPENDENCIA</MudTh>
                <MudTh>SIGLAS</MudTh>
                <MudTh>PUESTO</MudTh>

            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre de la Persona">@context.Nombre</MudTd>
                <MudTd DataLabel="Departamento">@context.Empresa</MudTd>
                <MudTd DataLabel="Departamento">@context.Siglas</MudTd>
                <MudTd DataLabel="Cargo">@context.Cargo</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{10,25}" RowsPerPageString="Folios por pág." />
            </PagerContent>
        </MudTable>
    </DialogContent>
    <DialogActions>

            <form hidden="@(!hide)">
        <MudTh>  <MudTextField  Style="font-size:10px;" @bind-Value="_nombreN" Label="NOMBRE" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField> </MudTh>
            <MudTh> <MudTextField Style="font-size:10px;" @bind-Value="_empresaN" Label="EMPRESA" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField></MudTh>
        <MudTh> <MudTextField  Style="font-size:10px;" @bind-Value="_siglasN" Label="SIGLAS" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField></MudTh>
            <MudTh> <MudTextField Style="font-size:10px;" @bind-Value="_puestoN" Label="PUESTO" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField></MudTh>
            <MudTh>  <MudButton ButtonType="ButtonType.Submit" Class="botones-accion" OnClick="@saveExterno">GUARDAR</MudButton></MudTh>
        </form>

        <MudCheckBox @bind-Checked="@hide" Label="Agregar" Color="Color.Primary"></MudCheckBox>
        <MudButton ButtonType="ButtonType.Submit" Class="botones-accion" OnClick="@Cancel" >Cancelar</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Class="botones-accion" OnClick="@Submit" >Guardar</MudButton>
    </DialogActions>
</MudDialog>


@code {
    bool hide { get; set; } = false;
    string _nombreN { get; set; }
    string _empresaN { get; set; }
    string _siglasN { get; set; }
    string _puestoN { get; set; }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    void Cancel() => MudDialog.Cancel();
    private MudTable<OficiosUsuext> mudTable;
    OficiosUsuext selectedItem = new();
    private string searchString1 = "";
    private int selectedRowNumber = -1;
    private bool _multiSelect = false;
    private IEnumerable<OficiosUsuext> Elements = new List<OficiosUsuext>();

    protected  override async Task OnInitializedAsync()
    {

        Elements = await OficioService.GetOficioUsuextAll();
    }

    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(selectedItem));  
    } 

    private async Task saveExterno()
    {

        var idindex = (await(OficioService.GetIndexUserxt()));
        var externo = new OficiosUsuext((idindex + 1), _empresaN.ToUpper(), _siglasN.ToUpper(), _nombreN.ToUpper(), _puestoN.ToUpper(), DateTime.Now, true);
         await  OficioService.CreateOficioUsuext(externo);
         //Elements.Concat(new [] { externo });  //tabla update
         //StateHasChanged();
        MudDialog.Close(DialogResult.Ok(externo));

        //cerrar y tomar dato?
        // esconder formulario
    }

    private bool FilterFunc1(OficiosUsuext element) => FilterFunc(element, searchString1);
    private bool FilterFunc(OficiosUsuext element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Nombre.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Empresa.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Nombre} {element.Empresa} {element.Cargo}".Contains(searchString))
            return true;
        return false;
    }
    private void RowClickEvent(TableRowClickEventArgs<OficiosUsuext> tableRowClickEventArgs)
    {
        // EmpleadoSelected(tableRowClickEventArgs.Item);
        selectedItem = tableRowClickEventArgs.Item;
    }
    private string SelectedRowClassFunc(OficiosUsuext element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
