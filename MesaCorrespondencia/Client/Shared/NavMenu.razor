@inject AppState appState
@inject ILocalStorageService localStorage
@implements IDisposable


   

@if(_ejercicio != 99 || _ejercicio != 0)
{
    <MudNavMenu>
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="/oficios-recibidos" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.FileDownload">Oficios Recibidos</MudNavLink>
        <MudNavLink Href="/oficios-expedidos" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.FileUpload">Oficios Expedidos</MudNavLink>
        <MudNavLink Href="/oficios-porexpedir" Match="NavLinkMatch.Prefix" Icon="@Icons.Filled.DriveFileRenameOutline">Oficios por Expedir</MudNavLink>
    </MudNavMenu>
  
}



@code{
    private int _ejercicio;
    protected override async void OnInitialized()
    {
        appState.OnChange += StateHasChanged;
        _ejercicio = await localStorage.GetItemAsync<int>("MC__ejercicio");
        appState.Ejercicio = _ejercicio;
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }
}